// <auto-generated />
using System;
using Data.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Blogging.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210622055047_featurss")]
    partial class featurss
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Blogging.Domain.Entities.Blog.Blog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("BannerUri")
                        .HasColumnType("text");

                    b.Property<int?>("BlogCategoryId")
                        .HasColumnType("integer");

                    b.Property<int>("CommentCount")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("FirstPagePost")
                        .HasColumnType("boolean");

                    b.Property<string>("ImageUri")
                        .HasColumnType("text");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Keyword")
                        .HasColumnType("text");

                    b.Property<string>("Language")
                        .HasColumnType("text");

                    b.Property<int>("LikeCount")
                        .HasColumnType("integer");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("text");

                    b.Property<string>("ThumbUri")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.Property<string>("VideoUri")
                        .HasColumnType("text");

                    b.Property<int>("ViewCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BlogCategoryId");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("Blogging.Domain.Entities.Blog.BlogCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ImageUri")
                        .HasColumnType("text");

                    b.Property<bool>("IsInPage")
                        .HasColumnType("boolean");

                    b.Property<int>("NameId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("NameId");

                    b.ToTable("BlogCategories");
                });

            modelBuilder.Entity("Blogging.Domain.Entities.Features.FeaturesCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("NameId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("NameId");

                    b.ToTable("FeaturesCategories");
                });

            modelBuilder.Entity("Blogging.Domain.Entities.Features.FeaturesInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("DescriptionId")
                        .HasColumnType("integer");

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.Property<int>("ImageId")
                        .HasColumnType("integer");

                    b.Property<int>("SubTitleId")
                        .HasColumnType("integer");

                    b.Property<int>("TitleId")
                        .HasColumnType("integer");

                    b.Property<int>("VideoId")
                        .HasColumnType("integer");

                    b.Property<int?>("featuresCategoryId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DescriptionId");

                    b.HasIndex("ImageId");

                    b.HasIndex("SubTitleId");

                    b.HasIndex("TitleId");

                    b.HasIndex("VideoId");

                    b.HasIndex("featuresCategoryId");

                    b.ToTable("FeaturesInformations");
                });

            modelBuilder.Entity("Blogging.Domain.Entities.FrequentlyQuestion.FrequentlyQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("FrequentlyQuestionCategoryId")
                        .HasColumnType("integer");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer");

                    b.Property<int>("ResponseId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FrequentlyQuestionCategoryId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("ResponseId");

                    b.ToTable("FrequentlyQuestions");
                });

            modelBuilder.Entity("Blogging.Domain.Entities.FrequentlyQuestion.FrequentlyQuestionCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("NameId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("NameId");

                    b.ToTable("FrequentlyQuestionCategories");
                });

            modelBuilder.Entity("Blogging.Domain.Entities.Translation.Translation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Arabic")
                        .HasColumnType("text");

                    b.Property<string>("English")
                        .HasColumnType("text");

                    b.Property<string>("Persian")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Translations");
                });

            modelBuilder.Entity("Blogging.Domain.Entities.Blog.Blog", b =>
                {
                    b.HasOne("Blogging.Domain.Entities.Blog.BlogCategory", "BlogCategory")
                        .WithMany("Blogs")
                        .HasForeignKey("BlogCategoryId");
                });

            modelBuilder.Entity("Blogging.Domain.Entities.Blog.BlogCategory", b =>
                {
                    b.HasOne("Blogging.Domain.Entities.Translation.Translation", "Translation")
                        .WithMany()
                        .HasForeignKey("NameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Blogging.Domain.Entities.Features.FeaturesCategory", b =>
                {
                    b.HasOne("Blogging.Domain.Entities.Translation.Translation", "Translation")
                        .WithMany()
                        .HasForeignKey("NameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Blogging.Domain.Entities.Features.FeaturesInformation", b =>
                {
                    b.HasOne("Blogging.Domain.Entities.Translation.Translation", "Description")
                        .WithMany()
                        .HasForeignKey("DescriptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Blogging.Domain.Entities.Translation.Translation", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Blogging.Domain.Entities.Translation.Translation", "SubTitle")
                        .WithMany()
                        .HasForeignKey("SubTitleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Blogging.Domain.Entities.Translation.Translation", "Title")
                        .WithMany()
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Blogging.Domain.Entities.Translation.Translation", "Video")
                        .WithMany()
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Blogging.Domain.Entities.Features.FeaturesCategory", "featuresCategory")
                        .WithMany("featuresInformation")
                        .HasForeignKey("featuresCategoryId");
                });

            modelBuilder.Entity("Blogging.Domain.Entities.FrequentlyQuestion.FrequentlyQuestion", b =>
                {
                    b.HasOne("Blogging.Domain.Entities.FrequentlyQuestion.FrequentlyQuestionCategory", "FrequentlyQuestionCategory")
                        .WithMany("FrequentlyQuestions")
                        .HasForeignKey("FrequentlyQuestionCategoryId");

                    b.HasOne("Blogging.Domain.Entities.Translation.Translation", "QuestionTranslation")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Blogging.Domain.Entities.Translation.Translation", "ResponseTranslation")
                        .WithMany()
                        .HasForeignKey("ResponseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Blogging.Domain.Entities.FrequentlyQuestion.FrequentlyQuestionCategory", b =>
                {
                    b.HasOne("Blogging.Domain.Entities.Translation.Translation", "Translation")
                        .WithMany()
                        .HasForeignKey("NameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
