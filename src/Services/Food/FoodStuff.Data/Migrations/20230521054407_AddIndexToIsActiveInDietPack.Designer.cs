// <auto-generated />
using System;
using Data.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace FoodStuff.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230521054407_AddIndexToIsActiveInDietPack")]
    partial class AddIndexToIsActiveInDietPack
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("FoodStuff.Domain.Entities.Diet.DietAlergy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("IngredientAlergyId")
                        .HasColumnType("integer");

                    b.Property<int>("MainAlergyId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MainAlergyId");

                    b.ToTable("DietAlergies");
                });

            modelBuilder.Entity("FoodStuff.Domain.Entities.Diet.DietCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("DescriptionId")
                        .HasColumnType("integer");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<int>("NameId")
                        .HasColumnType("integer");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DescriptionId");

                    b.HasIndex("NameId");

                    b.ToTable("DietCategories");
                });

            modelBuilder.Entity("FoodStuff.Domain.Entities.Diet.DietPack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double>("CaloriValue")
                        .HasColumnType("double precision");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<double>("DailyCalorie")
                        .HasColumnType("double precision");

                    b.Property<int>("FoodMeal")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("NameId")
                        .HasColumnType("integer");

                    b.Property<string>("NutrientValue")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.HasIndex("NameId");

                    b.ToTable("DietPacks");
                });

            modelBuilder.Entity("FoodStuff.Domain.Entities.Diet.DietPackAlerge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("DietPackId")
                        .HasColumnType("integer");

                    b.Property<int>("IngredientId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DietPackId");

                    b.HasIndex("IngredientId");

                    b.ToTable("DietPackAlerges");
                });

            modelBuilder.Entity("FoodStuff.Domain.Entities.Diet.DietPackDietCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("DietCategoryId")
                        .HasColumnType("integer");

                    b.Property<int>("DietPackId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DietCategoryId");

                    b.HasIndex("DietPackId");

                    b.ToTable("DietPackDietCategories");
                });

            modelBuilder.Entity("FoodStuff.Domain.Entities.Diet.DietPackFood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Calorie")
                        .HasColumnType("integer");

                    b.Property<int>("CategoryChildId")
                        .HasColumnType("integer");

                    b.Property<int>("DietPackId")
                        .HasColumnType("integer");

                    b.Property<int>("FoodId")
                        .HasColumnType("integer");

                    b.Property<int>("MeasureUnitId")
                        .HasColumnType("integer");

                    b.Property<string>("NutrientValue")
                        .HasColumnType("text");

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("DietPackId");

                    b.HasIndex("FoodId");

                    b.HasIndex("MeasureUnitId");

                    b.ToTable("DietPackFoods");
                });

            modelBuilder.Entity("FoodStuff.Domain.Entities.Diet.DietPackNationality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("DietPackId")
                        .HasColumnType("integer");

                    b.Property<int>("NationalityId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DietPackId");

                    b.HasIndex("NationalityId");

                    b.ToTable("DietPackNationalities");
                });

            modelBuilder.Entity("FoodStuff.Domain.Entities.Diet.DietPackSpecialDisease", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("DietPackId")
                        .HasColumnType("integer");

                    b.Property<int>("SpecialDisease")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DietPackId");

                    b.ToTable("DietPackSpecialDiseases");
                });

            modelBuilder.Entity("FoodStuff.Domain.Entities.Diet.UserTrackDietPack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("DailyCalorie")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<int>("NutritionistId")
                        .HasColumnType("integer");

                    b.Property<string>("PackageName")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("UserTrackDietPacks");
                });

            modelBuilder.Entity("FoodStuff.Domain.Entities.Diet.UserTrackDietPackDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("DietPackId")
                        .HasColumnType("integer");

                    b.Property<int>("Meal")
                        .HasColumnType("integer");

                    b.Property<int>("Repeat")
                        .HasColumnType("integer");

                    b.Property<int>("UserTrackDietPackId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DietPackId");

                    b.HasIndex("UserTrackDietPackId");

                    b.ToTable("UserTrackDietPackDetails");
                });

            modelBuilder.Entity("FoodStuff.Domain.Entities.Food.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("LogoUri")
                        .HasColumnType("text");

                    b.Property<int>("NameId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("NameId");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("FoodStuff.Domain.Entities.Food.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("NameId")
                        .HasColumnType("integer");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer");

                    b.Property<float?>("Percent")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("NameId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("FoodStuff.Domain.Entities.Food.DailyTargetNutrient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("FromAge")
                        .HasColumnType("integer");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<int>("Nutrient")
                        .HasColumnType("integer");

                    b.Property<string>("NutrientValue")
                        .HasColumnType("text");

                    b.Property<int>("ToAge")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("DailyTargetNutrients");
                });

            modelBuilder.Entity("FoodStuff.Domain.Entities.Food.ExcelTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ArabicName")
                        .HasColumnType("text");

                    b.Property<string>("Brand")
                        .HasColumnType("text");

                    b.Property<int>("Code")
                        .HasColumnType("integer");

                    b.Property<string>("EnglishName")
                        .HasColumnType("text");

                    b.Property<string>("GS1")
                        .HasColumnType("text");

                    b.Property<string>("IRCode")
                        .HasColumnType("text");

                    b.Property<string>("PersianName")
                        .HasColumnType("text");

                    b.Property<double>("V1")
                        .HasColumnType("double precision");

                    b.Property<double>("V10")
                        .HasColumnType("double precision");

                    b.Property<double>("V11")
                        .HasColumnType("double precision");

                    b.Property<double>("V12")
                        .HasColumnType("double precision");

                    b.Property<double>("V13")
                        .HasColumnType("double precision");

                    b.Property<double>("V14")
                        .HasColumnType("double precision");

                    b.Property<double>("V15")
                        .HasColumnType("double precision");

                    b.Property<double>("V16")
                        .HasColumnType("double precision");

                    b.Property<double>("V17")
                        .HasColumnType("double precision");

                    b.Property<double>("V18")
                        .HasColumnType("double precision");

                    b.Property<double>("V19")
                        .HasColumnType("double precision");

                    b.Property<double>("V2")
                        .HasColumnType("double precision");

                    b.Property<double>("V20")
                        .HasColumnType("double precision");

                    b.Property<double>("V21")
                        .HasColumnType("double precision");

                    b.Property<double>("V22")
                        .HasColumnType("double precision");

                    b.Property<double>("V23")
                        .HasColumnType("double precision");

                    b.Property<double>("V24")
                        .HasColumnType("double precision");

                    b.Property<double>("V25")
                        .HasColumnType("double precision");

                    b.Property<double>("V26")
                        .HasColumnType("double precision");

                    b.Property<double>("V27")
                        .HasColumnType("double precision");

                    b.Property<double>("V28")
                        .HasColumnType("double precision");

                    b.Property<double>("V29")
                        .HasColumnType("double precision");

                    b.Property<double>("V3")
                        .HasColumnType("double precision");

                    b.Property<double>("V30")
                        .HasColumnType("double precision");

                    b.Property<double>("V31")
                        .HasColumnType("double precision");

                    b.Property<double>("V32")
                        .HasColumnType("double precision");

                    b.Property<double>("V33")
                        .HasColumnType("double precision");

                    b.Property<double>("V34")
                        .HasColumnType("double precision");

                    b.Property<double>("V4")
                        .HasColumnType("double precision");

                    b.Property<double>("V5")
                        .HasColumnType("double precision");

                    b.Property<double>("V6")
                        .HasColumnType("double precision");

                    b.Property<double>("V7")
                        .HasColumnType("double precision");

                    b.Property<double>("V8")
                        .HasColumnType("double precision");

                    b.Property<double>("V9")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("ExcelTables");
                });

            modelBuilder.Entity("FoodStuff.Domain.Entities.Food.Food", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<TimeSpan>("BakingTime")
                        .HasColumnType("interval");

                    b.Property<int>("BakingType")
                        .HasColumnType("integer");

                    b.Property<string>("BarcodeGs1")
                        .HasColumnType("text");

                    b.Property<string>("BarcodeNational")
                        .HasColumnType("text");

                    b.Property<int?>("BrandId")
                        .HasColumnType("integer");

                    b.Property<int>("DefaultMeasureUnitId")
                        .HasColumnType("integer");

                    b.Property<double>("DryIngredient")
                        .HasColumnType("double precision");

                    b.Property<double>("EvaporatedWater")
                        .HasColumnType("double precision");

                    b.Property<long>("FoodCode")
                        .HasColumnType("bigint");

                    b.Property<int[]>("FoodMeals")
                        .HasColumnType("integer[]");

                    b.Property<int>("FoodType")
                        .HasColumnType("integer");

                    b.Property<double>("GI")
                        .HasColumnType("double precision");

                    b.Property<string>("ImageThumb")
                        .HasColumnType("text");

                    b.Property<string>("ImageUri")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIngredient")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRecipe")
                        .HasColumnType("boolean");

                    b.Property<int>("IsRecipeCategoreId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsUpdate")
                        .HasColumnType("boolean");

                    b.Property<int>("NameId")
                        .HasColumnType("integer");

                    b.Property<string>("NutrientValue")
                        .HasColumnType("text");

                    b.Property<int>("PersonCount")
                        .HasColumnType("integer");

                    b.Property<int?>("RecipeId")
                        .HasColumnType("integer");

                    b.Property<string>("Tag")
                        .HasColumnType("text");

                    b.Property<string>("TagArEn")
                        .HasColumnType("text");

                    b.Property<bool>("UseInDiet")
                        .HasColumnType("boolean");

                    b.Property<double>("Version")
                        .HasColumnType("double precision");

                    b.Property<double>("WeightAfterBaking")
                        .HasColumnType("double precision");

                    b.Property<double>("WeightBeforBaking")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("NameId");

                    b.HasIndex("RecipeId");

                    b.ToTable("Foods");
                });

            modelBuilder.Entity("FoodStuff.Domain.Entities.Food.FoodCategory", b =>
                {
                    b.Property<int>("FoodId")
                        .HasColumnType("integer");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.HasKey("FoodId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("FoodCategories");
                });

            modelBuilder.Entity("FoodStuff.Domain.Entities.Food.FoodCommentAndLike", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("AdminConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<int>("FoodId")
                        .HasColumnType("integer");

                    b.Property<string>("Language")
                        .HasColumnType("text");

                    b.Property<bool>("Like")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.ToTable("FoodCommentAndLikes");
                });

            modelBuilder.Entity("FoodStuff.Domain.Entities.Food.FoodDietCategory", b =>
                {
                    b.Property<int>("FoodId")
                        .HasColumnType("integer");

                    b.Property<int>("DietCategoryId")
                        .HasColumnType("integer");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.HasKey("FoodId", "DietCategoryId");

                    b.HasIndex("DietCategoryId");

                    b.ToTable("FoodDietCategories");
                });

            modelBuilder.Entity("FoodStuff.Domain.Entities.Food.FoodFoodHabit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("FoodHabit")
                        .HasColumnType("integer");

                    b.Property<int>("FoodId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.ToTable("FoodFoodHabits");
                });

            modelBuilder.Entity("FoodStuff.Domain.Entities.Food.FoodIngredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("FoodId")
                        .HasColumnType("integer");

                    b.Property<int>("IngredientId")
                        .HasColumnType("integer");

                    b.Property<double>("IngredientValue")
                        .HasColumnType("double precision");

                    b.Property<int>("MeasureUnitId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.HasIndex("IngredientId");

                    b.HasIndex("MeasureUnitId");

                    b.ToTable("FoodIngredients");
                });

            modelBuilder.Entity("FoodStuff.Domain.Entities.Food.FoodMeasureUnit", b =>
                {
                    b.Property<int>("FoodId")
                        .HasColumnType("integer");

                    b.Property<int>("MeasureUnitId")
                        .HasColumnType("integer");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.HasKey("FoodId", "MeasureUnitId");

                    b.HasIndex("MeasureUnitId");

                    b.ToTable("FoodMeasureUnits");
                });

            modelBuilder.Entity("FoodStuff.Domain.Entities.Food.FoodNationality", b =>
                {
                    b.Property<int>("FoodId")
                        .HasColumnType("integer");

                    b.Property<int>("NationalityId")
                        .HasColumnType("integer");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.HasKey("FoodId", "NationalityId");

                    b.HasIndex("NationalityId");

                    b.ToTable("FoodNationalities");
                });

            modelBuilder.Entity("FoodStuff.Domain.Entities.Food.FoodSpecialDisease", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("FoodId")
                        .HasColumnType("integer");

                    b.Property<int>("SpecialDisease")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.ToTable("FoodSpecialDiseases");
                });

            modelBuilder.Entity("FoodStuff.Domain.Entities.Food.Ingredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<int>("DefaultMeasureUnitId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsFood")
                        .HasColumnType("boolean");

                    b.Property<int>("NameId")
                        .HasColumnType("integer");

                    b.Property<string>("NutrientValue")
                        .HasColumnType("text");

                    b.Property<string>("Tag")
                        .HasColumnType("text");

                    b.Property<string>("TagAr")
                        .HasColumnType("text");

                    b.Property<string>("TagArEn")
                        .HasColumnType("text");

                    b.Property<string>("TagEn")
                        .HasColumnType("text");

                    b.Property<string>("ThumbUri")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NameId");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("FoodStuff.Domain.Entities.Food.IngredientAllergy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("IngredientId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IngredientId");

                    b.ToTable("IngredientAllergies");
                });

            modelBuilder.Entity("FoodStuff.Domain.Entities.Food.IngredientMeasureUnit", b =>
                {
                    b.Property<int>("IngredientId")
                        .HasColumnType("integer");

                    b.Property<int>("MeasureUnitId")
                        .HasColumnType("integer");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.HasKey("IngredientId", "MeasureUnitId");

                    b.HasIndex("MeasureUnitId");

                    b.ToTable("IngredientMeasureUnits");
                });

            modelBuilder.Entity("FoodStuff.Domain.Entities.Food.Nationality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("NameId")
                        .HasColumnType("integer");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("NameId");

                    b.ToTable("Nationalities");
                });

            modelBuilder.Entity("FoodStuff.Domain.Entities.Food.PersonalFood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<TimeSpan>("BakingTime")
                        .HasColumnType("interval");

                    b.Property<int>("BakingType")
                        .HasColumnType("integer");

                    b.Property<double>("DryIngredient")
                        .HasColumnType("double precision");

                    b.Property<double>("EvaporatedWater")
                        .HasColumnType("double precision");

                    b.Property<string>("ImageUri")
                        .HasColumnType("text");

                    b.Property<DateTime>("Insertdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsCopyable")
                        .HasColumnType("boolean");

                    b.Property<bool>("Isdelete")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NutrientValue")
                        .HasColumnType("text");

                    b.Property<int?>("ParentFoodId")
                        .HasColumnType("integer");

                    b.Property<string>("Recipe")
                        .HasColumnType("text");

                    b.Property<string>("ThumbUri")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<double>("Water")
                        .HasColumnType("double precision");

                    b.Property<double>("WeightAfterBaking")
                        .HasColumnType("double precision");

                    b.Property<double>("WeightBeforBaking")
                        .HasColumnType("double precision");

                    b.Property<string>("_id")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PersonalFoods");
                });

            modelBuilder.Entity("FoodStuff.Domain.Entities.Food.PersonalFoodIngredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("IngredientId")
                        .HasColumnType("integer");

                    b.Property<double>("IngredientValue")
                        .HasColumnType("double precision");

                    b.Property<int>("MeasureUnitId")
                        .HasColumnType("integer");

                    b.Property<int>("PersonalFoodId")
                        .HasColumnType("integer");

                    b.Property<string>("_id")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IngredientId");

                    b.HasIndex("MeasureUnitId");

                    b.HasIndex("PersonalFoodId");

                    b.ToTable("PersonalFoodIngredients");
                });

            modelBuilder.Entity("FoodStuff.Domain.Entities.Food.RecipeCategore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("NameId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("NameId");

                    b.ToTable("RecipeCategores");
                });

            modelBuilder.Entity("FoodStuff.Domain.Entities.Food.UserFoodAlergy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("IngredientId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("_id")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IngredientId");

                    b.ToTable("UserFoodAlergies");
                });

            modelBuilder.Entity("FoodStuff.Domain.Entities.Food.UserFoodFavorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("FoodId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("_id")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.ToTable("UserFoodFavorites");
                });

            modelBuilder.Entity("FoodStuff.Domain.Entities.Food.UserReportedFoods", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Barcode")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FirstImage")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("SecendImage")
                        .HasColumnType("text");

                    b.Property<string>("ThirdImage")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("UserReportedFoods");
                });

            modelBuilder.Entity("FoodStuff.Domain.Entities.Food.UserTrackFood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("FoodId")
                        .HasColumnType("integer");

                    b.Property<int>("FoodMeal")
                        .HasColumnType("integer");

                    b.Property<string>("FoodNutrientValue")
                        .HasColumnType("text");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("MeasureUnitId")
                        .HasColumnType("integer");

                    b.Property<int?>("PersonalFoodId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<float>("Value")
                        .HasColumnType("real");

                    b.Property<string>("_id")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.HasIndex("MeasureUnitId");

                    b.HasIndex("PersonalFoodId");

                    b.ToTable("UserTrackFoods");
                });

            modelBuilder.Entity("FoodStuff.Domain.Entities.Food.UserTrackNutrient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.Property<string>("_id")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UserTrackNutrients");
                });

            modelBuilder.Entity("FoodStuff.Domain.Entities.Food.UserTrackWater", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.Property<string>("_id")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UserTrackWaters");
                });

            modelBuilder.Entity("FoodStuff.Domain.Entities.MeasureUnit.MeasureUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("MeasureUnitCategory")
                        .HasColumnType("integer");

                    b.Property<int>("NameId")
                        .HasColumnType("integer");

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.Property<double>("Version")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("NameId");

                    b.ToTable("MeasureUnits");
                });

            modelBuilder.Entity("FoodStuff.Domain.Entities.MeasureUnit.NutrientMeasureUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("MeasureUnitId")
                        .HasColumnType("integer");

                    b.Property<int>("Nutrient")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MeasureUnitId");

                    b.ToTable("NutrientMeasureUnits");
                });

            modelBuilder.Entity("FoodStuff.Domain.Entities.Translation.Translation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Arabic")
                        .HasColumnType("text");

                    b.Property<string>("English")
                        .HasColumnType("text");

                    b.Property<string>("Persian")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Translations");
                });

            modelBuilder.Entity("FoodStuff.Domain.Entities.Diet.DietAlergy", b =>
                {
                    b.HasOne("FoodStuff.Domain.Entities.Food.Ingredient", "MainAlergy")
                        .WithMany()
                        .HasForeignKey("MainAlergyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodStuff.Domain.Entities.Diet.DietCategory", b =>
                {
                    b.HasOne("FoodStuff.Domain.Entities.Translation.Translation", "DescriptionTranslation")
                        .WithMany()
                        .HasForeignKey("DescriptionId");

                    b.HasOne("FoodStuff.Domain.Entities.Translation.Translation", "NameTranslation")
                        .WithMany()
                        .HasForeignKey("NameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodStuff.Domain.Entities.Diet.DietPack", b =>
                {
                    b.HasOne("FoodStuff.Domain.Entities.Translation.Translation", "Name")
                        .WithMany()
                        .HasForeignKey("NameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodStuff.Domain.Entities.Diet.DietPackAlerge", b =>
                {
                    b.HasOne("FoodStuff.Domain.Entities.Diet.DietPack", "DietPack")
                        .WithMany("DietPackAlerges")
                        .HasForeignKey("DietPackId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FoodStuff.Domain.Entities.Food.Ingredient", "Ingredient")
                        .WithMany()
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodStuff.Domain.Entities.Diet.DietPackDietCategory", b =>
                {
                    b.HasOne("FoodStuff.Domain.Entities.Diet.DietCategory", "DietCategory")
                        .WithMany("DietPackDietCategories")
                        .HasForeignKey("DietCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FoodStuff.Domain.Entities.Diet.DietPack", "DietPack")
                        .WithMany("DietPackDietCategories")
                        .HasForeignKey("DietPackId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodStuff.Domain.Entities.Diet.DietPackFood", b =>
                {
                    b.HasOne("FoodStuff.Domain.Entities.Diet.DietPack", "DietPack")
                        .WithMany("DietPackFoods")
                        .HasForeignKey("DietPackId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FoodStuff.Domain.Entities.Food.Food", "Food")
                        .WithMany("DietPackFoods")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FoodStuff.Domain.Entities.MeasureUnit.MeasureUnit", "MeasureUnit")
                        .WithMany("DietPackFoods")
                        .HasForeignKey("MeasureUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodStuff.Domain.Entities.Diet.DietPackNationality", b =>
                {
                    b.HasOne("FoodStuff.Domain.Entities.Diet.DietPack", "DietPack")
                        .WithMany("DietPackNationalities")
                        .HasForeignKey("DietPackId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FoodStuff.Domain.Entities.Food.Nationality", "Nationality")
                        .WithMany("DietPackNationalities")
                        .HasForeignKey("NationalityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodStuff.Domain.Entities.Diet.DietPackSpecialDisease", b =>
                {
                    b.HasOne("FoodStuff.Domain.Entities.Diet.DietPack", "DietPack")
                        .WithMany("DietPackSpecialDiseases")
                        .HasForeignKey("DietPackId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodStuff.Domain.Entities.Diet.UserTrackDietPackDetail", b =>
                {
                    b.HasOne("FoodStuff.Domain.Entities.Diet.DietPack", "DietPack")
                        .WithMany()
                        .HasForeignKey("DietPackId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FoodStuff.Domain.Entities.Diet.UserTrackDietPack", "UserTrackDietPack")
                        .WithMany("UserTrackDietPackDetails")
                        .HasForeignKey("UserTrackDietPackId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodStuff.Domain.Entities.Food.Brand", b =>
                {
                    b.HasOne("FoodStuff.Domain.Entities.Translation.Translation", "Translation")
                        .WithMany()
                        .HasForeignKey("NameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodStuff.Domain.Entities.Food.Category", b =>
                {
                    b.HasOne("FoodStuff.Domain.Entities.Translation.Translation", "NameTranslation")
                        .WithMany()
                        .HasForeignKey("NameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodStuff.Domain.Entities.Food.Food", b =>
                {
                    b.HasOne("FoodStuff.Domain.Entities.Food.Brand", "Brand")
                        .WithMany("Foods")
                        .HasForeignKey("BrandId");

                    b.HasOne("FoodStuff.Domain.Entities.Translation.Translation", "TranslationName")
                        .WithMany()
                        .HasForeignKey("NameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FoodStuff.Domain.Entities.Translation.Translation", "TranslationRecipe")
                        .WithMany()
                        .HasForeignKey("RecipeId");
                });

            modelBuilder.Entity("FoodStuff.Domain.Entities.Food.FoodCategory", b =>
                {
                    b.HasOne("FoodStuff.Domain.Entities.Food.Category", "Category")
                        .WithMany("FoodCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FoodStuff.Domain.Entities.Food.Food", "Food")
                        .WithMany("FoodCategories")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodStuff.Domain.Entities.Food.FoodCommentAndLike", b =>
                {
                    b.HasOne("FoodStuff.Domain.Entities.Food.Food", "Food")
                        .WithMany("foodCommentAndLikes")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodStuff.Domain.Entities.Food.FoodDietCategory", b =>
                {
                    b.HasOne("FoodStuff.Domain.Entities.Diet.DietCategory", "DietCategory")
                        .WithMany("FoodDietCategories")
                        .HasForeignKey("DietCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FoodStuff.Domain.Entities.Food.Food", "Food")
                        .WithMany("FoodDietCategories")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodStuff.Domain.Entities.Food.FoodFoodHabit", b =>
                {
                    b.HasOne("FoodStuff.Domain.Entities.Food.Food", null)
                        .WithMany("FoodHabits")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodStuff.Domain.Entities.Food.FoodIngredient", b =>
                {
                    b.HasOne("FoodStuff.Domain.Entities.Food.Food", "Food")
                        .WithMany("FoodIngredients")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FoodStuff.Domain.Entities.Food.Ingredient", "Ingredient")
                        .WithMany()
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FoodStuff.Domain.Entities.MeasureUnit.MeasureUnit", "MeasureUnit")
                        .WithMany()
                        .HasForeignKey("MeasureUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodStuff.Domain.Entities.Food.FoodMeasureUnit", b =>
                {
                    b.HasOne("FoodStuff.Domain.Entities.Food.Food", "Food")
                        .WithMany("FoodMeasureUnits")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FoodStuff.Domain.Entities.MeasureUnit.MeasureUnit", "MeasureUnit")
                        .WithMany("FoodMeasureUnits")
                        .HasForeignKey("MeasureUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodStuff.Domain.Entities.Food.FoodNationality", b =>
                {
                    b.HasOne("FoodStuff.Domain.Entities.Food.Food", "Food")
                        .WithMany("FoodNationalities")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FoodStuff.Domain.Entities.Food.Nationality", "Nationality")
                        .WithMany("FoodNationalities")
                        .HasForeignKey("NationalityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodStuff.Domain.Entities.Food.FoodSpecialDisease", b =>
                {
                    b.HasOne("FoodStuff.Domain.Entities.Food.Food", "Food")
                        .WithMany("FoodSpecialDiseases")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodStuff.Domain.Entities.Food.Ingredient", b =>
                {
                    b.HasOne("FoodStuff.Domain.Entities.Translation.Translation", "Translation")
                        .WithMany()
                        .HasForeignKey("NameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodStuff.Domain.Entities.Food.IngredientAllergy", b =>
                {
                    b.HasOne("FoodStuff.Domain.Entities.Food.Ingredient", "Ingredient")
                        .WithMany()
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodStuff.Domain.Entities.Food.IngredientMeasureUnit", b =>
                {
                    b.HasOne("FoodStuff.Domain.Entities.Food.Ingredient", "Ingredient")
                        .WithMany("IngredientMeasureUnits")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FoodStuff.Domain.Entities.MeasureUnit.MeasureUnit", "MeasureUnit")
                        .WithMany("IngredientMeasureUnits")
                        .HasForeignKey("MeasureUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodStuff.Domain.Entities.Food.Nationality", b =>
                {
                    b.HasOne("FoodStuff.Domain.Entities.Translation.Translation", "NameTranslation")
                        .WithMany()
                        .HasForeignKey("NameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodStuff.Domain.Entities.Food.PersonalFoodIngredient", b =>
                {
                    b.HasOne("FoodStuff.Domain.Entities.Food.Ingredient", "Ingredient")
                        .WithMany()
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FoodStuff.Domain.Entities.MeasureUnit.MeasureUnit", "MeasureUnit")
                        .WithMany()
                        .HasForeignKey("MeasureUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FoodStuff.Domain.Entities.Food.PersonalFood", "PersonalFood")
                        .WithMany("PersonalFoodIngredients")
                        .HasForeignKey("PersonalFoodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodStuff.Domain.Entities.Food.RecipeCategore", b =>
                {
                    b.HasOne("FoodStuff.Domain.Entities.Translation.Translation", "NameTranslation")
                        .WithMany()
                        .HasForeignKey("NameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodStuff.Domain.Entities.Food.UserFoodAlergy", b =>
                {
                    b.HasOne("FoodStuff.Domain.Entities.Food.Ingredient", "Ingredient")
                        .WithMany()
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodStuff.Domain.Entities.Food.UserFoodFavorite", b =>
                {
                    b.HasOne("FoodStuff.Domain.Entities.Food.Food", "Food")
                        .WithMany()
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodStuff.Domain.Entities.Food.UserTrackFood", b =>
                {
                    b.HasOne("FoodStuff.Domain.Entities.Food.Food", "Food")
                        .WithMany("UserTrackFoods")
                        .HasForeignKey("FoodId");

                    b.HasOne("FoodStuff.Domain.Entities.MeasureUnit.MeasureUnit", "MeasureUnit")
                        .WithMany()
                        .HasForeignKey("MeasureUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FoodStuff.Domain.Entities.Food.PersonalFood", "PersonalFood")
                        .WithMany("UserTrackFoods")
                        .HasForeignKey("PersonalFoodId");
                });

            modelBuilder.Entity("FoodStuff.Domain.Entities.MeasureUnit.MeasureUnit", b =>
                {
                    b.HasOne("FoodStuff.Domain.Entities.Translation.Translation", "Translation")
                        .WithMany()
                        .HasForeignKey("NameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodStuff.Domain.Entities.MeasureUnit.NutrientMeasureUnit", b =>
                {
                    b.HasOne("FoodStuff.Domain.Entities.MeasureUnit.MeasureUnit", "MeasureUnit")
                        .WithMany("NutrientMeasureUnits")
                        .HasForeignKey("MeasureUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
